import os 
import re
import json
import asyncio
import sqlite3
from loguru import logger
from aiohttp import ClientSession
from datetime import datetime as dt

import commands
import globals
from sites import Bomber
from config.config import Config
from repeat_commands import repeat_commands
from _commands.statistics import statistics

from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ( Message,
                            ReplyKeyboardMarkup, KeyboardButton, 
                            InlineKeyboardMarkup, InlineKeyboardButton
                          )

from db_models.User import all_users_table, data_users_table
from sqlalchemy import select

logger.add("debug.log", format="{time} {level} {message}", 
    level="DEBUG", rotation="1 week", compression="zip")

storage = MemoryStorage()
loop = asyncio.get_event_loop()
dp = Dispatcher(globals.bot, storage=storage, loop=loop)

send_mess_PATH = os.getcwd()  #–û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –±–æ—Ç–∞

class Userstate(StatesGroup):
    attack_phone = State()          #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ç–∞–∫–∏ –Ω–æ–º–µ—Ä–∞
    send_messages = State()         #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏        
    user_id = State()               #ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_message = State()          #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    try_try = State()               #–§—É–Ω–∫—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    send_message_func1 = State()    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è _1
    send_message_func2 = State()    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è _2
    id_user_var = State()           #ID —é–∑–µ—Ä–∞

#Own functions ----------> ###################################################
@dp.message_handler(content_types = ["text"])
async def own(message: types.Message, state:FSMContext):
    await state.update_data(user_id = str(message.from_user.id))
    globals.message = message

    globals.rep_comm = await repeat_commands(commands)

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:pass

#Attack phone nomber ----------> #############################################
@dp.message_handler(state = Userstate.attack_phone)
async def attack_phone(message: types.Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–≤–æ–¥ –º–æ–±–∏–ª—å–Ω–æ–≥–æ.
    '''

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:
        phone = re.sub("[^0-9]", "", message.text)

        if phone.startswith("7") or phone.startswith("8"):
            phone = f"7{phone[1:]}"
            globals.attack_country = "ru"

        elif phone.startswith("38"):
            globals.attack_country = "uk"
        
        else:
            return await message.answer("üîÅ–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–∞–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å!", reply=True)

        date = dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S")

        update_data = data_users_table.update().values(
            last_phone=message.text,
            last_date=date
        ).where(data_users_table.c.user_id==message.from_user.id)
        globals.conn.execute(update_data)

        usl = InlineKeyboardMarkup(
            inline_keyboard = [
                [InlineKeyboardButton("‚èπ–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                callback_data="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")]
            ])

        await message.answer(
        text="‚ñ∂Ô∏è–ê—Ç–∞–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ç–∞–∫–∏.", 
        reply_markup = usl)
        try:
            globals.my_class = Bomber(user_id=str(message.from_user.id))
            await globals.my_class.start(message.text, message.from_user.id)
        except:pass

#Admin mailing ----------> ###################################################           
@dp.message_handler(state = Userstate.send_messages, 
                    content_types = ["text", "photo"])
async def send_messages(message: types.Message, state: FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞.
    '''

    all_users = select([all_users_table.c.user_id])
    all_users = globals.conn.execute(all_users).fetchall()

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:

        start_time = dt.utcnow()

        half_lists = int(len(all_users)/2)
        part_1 = all_users[:half_lists]
        part_2 = all_users[half_lists:]

        part_3 = part_1[int(len(part_1)/2):]
        part_1 = part_1[:int(len(part_1)/2)]

        part_4 = part_2[int(len(part_2)/2):]
        part_2 = part_2[:int(len(part_2)/2)]

        if message.photo:
            #–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç - —Ñ–æ—Ç–æ
            photo = await globals.bot.get_file(
            message.photo[len(message.photo) - 1].file_id)
            photo = await globals.bot.download_file(photo.file_path)

            for user_1 in part_1:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_1[0], message.text)
                except:pass
            
            for user_2 in part_2:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_2[0], message.text)
                except:pass
            
            for user_3 in part_3:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_3[0], message.text)
                except:pass
            
            for user_4 in part_4:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_4[0], message.text)
                except:pass

        elif message.text:        
            #–ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç - —Ç–µ–∫—Å—Ç

            for user_1 in part_1:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_1[0], message.text)
                except:pass
            
            for user_2 in part_2:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_2[0], message.text)
                except:pass
            
            for user_3 in part_3:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_3[0], message.text)
                except:pass
            
            for user_4 in part_4:
                globals.count_mailing+=1
                try:
                    await globals.bot.send_message(user_4[0], message.text)
                except:pass

        end_time = (dt.utcnow() - start_time).total_seconds()
        await message.answer(
                f"‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! (Count: {globals.count_mailing})\n"+\
                "‚è±–í—Ä–µ–º—è(sec): {:.2f}".format(end_time), 
                reply=True)

        globals.count_mailing = 0
        
        await Userstate.try_try.set()

@dp.message_handler(state = Userstate.send_message)
async def send_message(message: types.Message, state:FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É.
    '''

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:
        language = select([all_users_table.c.language]).where(all_users_table.c.user_id==message.from_user.id)
        language = globals.conn.execute(language).fetchone()
       
        if language[0] == "None":
            lang_usl = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üá¨üáßENG", 
                                                callback_data="ENG")], 
                    [InlineKeyboardButton(text="üá∑üá∫RU", 
                                                callback_data="RU")]
                ]
            )

            await globals.bot.send_message(message.chat.id, 
                    text="üåêSelect the language\n"+\
                         "üåê–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
                    reply_markup=lang_usl)

        else:
            #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
            await globals.bot.send_message(globals.config.chat_id, 
                    text = f"User ID: <code>{str(message.from_user.id)}</code>\n"
                           f"Username: @{str(message.from_user.username)}\n"
                           f"Message: {message.text}", parse_mode="HTML")

            if language[0] == "ENG":
                #–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ(ENG)
                await globals.bot.send_message(message.chat.id, 
                        text="‚úÖMessage sent successfully!")

            elif language[0] == "RU":
                #–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ(RU)
                await globals.bot.send_message(message.chat.id, 
                        text="‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                    
        await Userstate.try_try.set()

@dp.message_handler(state=Userstate.try_try)
async def try_try(message: types.Message, state:FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    '''

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:pass

@dp.message_handler(state=Userstate.send_message_func1)
async def send_message1(message: types.Message, state:FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è 
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    '''

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:
        if not message.text.isdigit():
            await globals.bot.send_message(message.chat.id, 
                    text="‚ùóÔ∏èID –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!")
            await Userstate.send_message_func1.set()
        else:
            await state.update_data(id_user_var=str(message.text))
            await globals.bot.send_message(message.chat.id, 
                    text="üìß–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            await Userstate.send_message_func2.set()

@dp.message_handler(state=Userstate.send_message_func2)
async def send_message2(message: types.Message, state:FSMContext):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 
    –æ—Ç –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞.
    '''

    if message.text in list(globals.rep_comm):
        await globals.rep_comm[message.text](message)
    else:
        data = await state.get_data()
        _id = data.get("id_user_var")
        try:
            await globals.bot.send_message(int(_id), message.text)
            await globals.bot.send_message(message.chat.id, 
                    text="‚úÖ–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        except:await globals.bot.send_message(message.chat.id, 
            text="üëÅ–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!")
        await Userstate.try_try.set()

#CALLBACK ----------> ########################################################
@dp.callback_query_handler(lambda call: True, state="*")
async def knopki(call: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()
    userID = data.get("user_id")
    language = select([all_users_table.c.language]).where(all_users_table.c.user_id==userID)
    language = globals.conn.execute(language).fetchone()[0]

    if call.data == "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":

        if language == "ENG": message = "‚úîÔ∏èAttack stopped!"
        else: message = "‚úîÔ∏è–ê—Ç–∞–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!"
        try:
            await globals.my_class.stop(str(userID))
            await globals.bot.edit_message_text(
                            chat_id = call.message.chat.id, 
                            message_id = call.message.message_id, 
                            text =  message)
        except UnboundLocalError:
            await globals.my_class.stop(str(userID))
            await globals.bot.edit_message_text(
                            chat_id = call.message.chat.id, 
                            message_id = call.message.message_id, 
                            text =  message)
    
    elif call.data == "–†–∞—Å—Å—ã–ª–∫–∞":
        usl = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text = "üìß–°–æ–æ–±—â–µ–Ω–∏–µ", 
                                      callback_data = "–°–æ–æ–±—â–µ–Ω–∏–µ")], 
                [InlineKeyboardButton(text = "üñº–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                                      callback_data = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")]
            ])
        await globals.bot.edit_message_text(chat_id = call.message.chat.id, 
                                    message_id = call.message.message_id, 
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Çüëáüèº", reply_markup = usl)
        await Userstate.try_try.set()

    elif call.data == "–°–æ–æ–±—â–µ–Ω–∏–µ":
        await globals.bot.edit_message_text(chat_id = call.message.chat.id, 
                                       message_id = call.message.message_id, 
        text = "üìù–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await Userstate.send_messages.set()

    elif call.data == "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
        await globals.bot.edit_message_text(chat_id = call.message.chat.id, 
                                       message_id = call.message.message_id, 
        text = "üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–Ω–∏–µ ‚ûú")
        await Userstate.send_messages.set()

    elif call.data == "ENG":
        update_data = all_users_table.update().values(
            language="ENG"
        ).where(all_users_table.c.user_id==userID)
        globals.conn.execute(update_data)

        await globals.bot.edit_message_text(chat_id = call.message.chat.id, 
                                       message_id = call.message.message_id, 
                                       text = "üåêRussian ‚ûú English")
        usl = ReplyKeyboardMarkup(
            keyboard = [
                ["‚ö†Ô∏èCOVID-19 statistics"], 
                ["üí∏Currency"], 
                ["üí£Attack number"], 
                ["üåêChange the language"], 
                ["‚úâÔ∏èSend message"]
            ], 
            resize_keyboard = True
        )
        await globals.bot.send_message(call.message.chat.id, 
                               text="ü§ñUniversal Bot\n\nSelect an actionüëáüèº", 
                               reply_markup = usl)
    
    elif call.data == "RU":

        update_language = all_users_table.update().values(language="RU")
        globals.conn.execute(update_language)

        await globals.bot.edit_message_text(chat_id = call.message.chat.id, 
                                    message_id = call.message.message_id, 
                                    text = "üåê–ê–Ω–≥–ª–∏–π—Å–∫–∏–π ‚ûú –†—É—Å—Å–∫–∏–π")
        usl = ReplyKeyboardMarkup(
        keyboard = [
            #["üîî–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ"],
            ["‚ö†Ô∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ COVID-19"], 
            ["üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"],
            ["üåê–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"], 
            ["‚úâÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"]], 
        resize_keyboard = True)
        await globals.bot.send_message(call.message.chat.id, 
                               text="ü§ñUniversal Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëáüèº", 
                               reply_markup = usl)

    elif call.data == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ(ID)":
        await globals.bot.edit_message_text(chat_id = call.message.chat.id, 
                                    message_id = call.message.message_id, 
                                    text = "üëÅ‚Äçüó®–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
        await Userstate.send_message_func1.set()

    elif call.data == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É":
        filename = os.listdir("program")
        for program in filename:
            formats_program = program.split(".")
            formats_program.reverse()
            if formats_program[0] == "exe":
                crator_program = open(r"program/%s" % program, "rb")
        
                await globals.bot.edit_message_text(
                        chat_id = call.message.chat.id, 
                        message_id = call.message.message_id, 
                        text = "üîÑ–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏...")

                await globals.bot.send_chat_action(
                call.message.chat.id, 'typing')
                await globals.bot.send_document(
                call.message.chat.id, crator_program)
                await globals.bot.send_message(call.message.chat.id, 
                                        text="‚úÖ–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            else:pass

    elif call.data == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ":
        if not os.path.exists("program"):
            os.mkdir("program")
            await globals.bot.send_message(globals.config.chat_id, 
            text="Directory created but not exists files!")
            await globals.bot.edit_message_text(
                    chat_id = call.message.chat.id, 
                    message_id = call.message.message_id, 
                    text = "‚ö†Ô∏è–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã!"
            )
        else:
            dir_program = os.listdir("program")
            if dir_program == []:
                await globals.bot.edit_message_text(
                        chat_id = call.message.chat.id, 
                        message_id = call.message.message_id, 
                        text = "‚ö†Ô∏è–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã!"
                )
            else:
                for program_info in dir_program:
                    program = program_info.split(".")
                    program.reverse()
                    if program[0] == "jpg":
                        program_photo = open(r"program/%s" % program_info, "rb")
                        program_photo = program_photo.read()
                        await globals.bot.delete_message(
                        call.message.chat.id, call.message.message_id)
                        await globals.bot.send_photo(
                        call.message.chat.id, program_photo, 
                        caption=f"üí£Crater Bomber\n\n"
                        f"üìÉ–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç Universal Bot\n"
                        f"üñ•–í —Å–ª—É—á–∞–µ –ø–∞–¥–µ–Ω–∏—è –±–æ—Ç–∞, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å "
                        f"–ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Windows (–Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ).\n"
                        f"‚ûï–ò–∑ –ø–ª—é—Å–æ–≤: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã!\n"
                        f"‚öôÔ∏è–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ " 
                        f"–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ä–∞–¥–æ–≤–∞—Ç—å –í–∞—Å!")
                    else:pass           

    elif call.data == "Download the program":
        filename = os.listdir("program")
        for program in filename:
            formats_program = program.split(".")
            formats_program.reverse()
            if formats_program[0] == "exe":
                crator_program = open(r"program/%s" % program, "rb")
                await globals.bot.edit_message_text(
                        chat_id = call.message.chat.id, 
                        message_id = call.message.message_id, 
                        text = "üîÑWait for loading..."
                )
                await globals.bot.send_chat_action(
                    call.message.chat.id, 'typing'
                )
                await globals.bot.send_document(
                    call.message.chat.id, crator_program
                )
                await globals.bot.send_message(call.message.chat.id, 
                                            text="‚úÖDownload done!")

    elif call.data == "Info about the program":
        if not os.path.exists("program"):
            os.mkdir("program")
            await globals.bot.send_message(globals.config.chat_id, 
            text="Directory created but not exists files!")
            await globals.bot.edit_message_text(
                    chat_id = call.message.chat.id, 
                    message_id = call.message.message_id, 
                    text = "‚ö†Ô∏èFiles missing!"
            )
        else:
            dir_program = os.listdir("program")
            if dir_program == []:
                await globals.bot.edit_message_text(
                        chat_id = call.message.chat.id, 
                        message_id = call.message.message_id, 
                        text = "‚ö†Ô∏èFiles missing!"
                )
            else:
                for program_info in dir_program:
                    program = program_info.split(".")
                    program.reverse()
                    if program[0] == "jpg":
                        program_photo = open(r"program/%s" + program_info, "rb")
                        program_photo = program_photo.read()
                        await globals.bot.delete_message(
                        call.message.chat.id, call.message.message_id)
                        await globals.bot.send_photo(
                        call.message.chat.id, program_photo, 
                        caption=f"üí£Crater Bomber\n\n"
                        f"üìÉProgram from Universal Bot\n"
                        f"üñ•If the bot crashes, you can run "
                        f"the program on the Windows "
                        f"platform (on a computer).\n"
                        f"‚ûïOf the pluses: endless seconds!\n"
                        f"‚öôÔ∏èThe program will receive further "
                        f"updates and delight you!")
                    else:pass

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)