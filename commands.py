import os 
import json
import asyncio
import sqlite3
import globals
import requests
from loguru import logger
from bs4 import BeautifulSoup
from aiogram import types
from aiogram.utils import executor
from datetime import datetime as dt
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import (
                            ReplyKeyboardRemove, ReplyKeyboardMarkup, 
                            KeyboardButton, InlineKeyboardMarkup, 
                            InlineKeyboardButton
                          )

from db_models.User import all_users_table, data_users_table
from sqlalchemy import select

class Userstate(StatesGroup):
    attack_phone = State()          #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Ç–∞–∫–∏ –Ω–æ–º–µ—Ä–∞
    send_messages = State()         #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏        
    user_id = State()               #ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    send_message = State()          #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    select_language = State()       #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    try_try = State()               #–§—É–Ω–∫—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    send_message_func1 = State()    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è _1
    send_message_func2 = State()    #–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è _2
    id_user_var = State()           #ID —é–∑–µ—Ä–∞

@logger.catch
async def own_start(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ –±–∞–∑–µ. 
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, 
    —Ç–æ–≥–¥–∞ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.
    '''

    my_data = select([all_users_table]).where(all_users_table.c.user_id==message.from_user.id)
    my_data = globals.conn.execute(my_data).fetchall()

    if my_data == []:

        date_reg = dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S:")

        user_id = message.from_user.id
        username = str(message.from_user.username)

        insert_data = all_users_table.insert().values(
            user_id=message.from_user.id, 
            username=message.from_user.username, 
            date_registration=date_reg, 
            language="None"
        )

        globals.conn.execute(insert_data)

        '''
        await globals.bot.send_message(globals.config.chat_id, 
                            text="üÜïNew user!\n"+\
                            f"ID: {str(message.from_user.id)}\n"+\
                            f"@{str(message.from_user.username)}")
        '''

        lang_usl = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üá¨üáßENG", callback_data="ENG")],
                [InlineKeyboardButton(text="üá∑üá∫RU", callback_data="RU")]
            ])

        await globals.bot.send_message(message.chat.id, 
                            text="üåêSelect the language\n"+\
                                 "üåê–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
                            reply_markup=lang_usl)
    else:
        language = my_data[0][3]

        if language == "None":
            lang_usl = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üá¨üáßENG", callback_data="ENG")], 
                    [InlineKeyboardButton(text="üá∑üá∫RU", callback_data="RU")]
                ]
            )

            await globals.bot.send_message(message.chat.id, 
                    text=f"üåêSelect the language\n"
                    f"üåê–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
                    reply_markup=lang_usl
            )
        
        elif language == "ENG":
            globals.lang = "ENG"
            await eng_start(message)

        elif language == "RU":
            globals.lang = "RU"
            await ru_start(message)

@logger.catch
async def ru_start(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏–∏ –≤ own_start()
    '''
    usl = ReplyKeyboardMarkup(
        keyboard = [
            #["üîî–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ"],
            ["‚ö†Ô∏è–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ COVID-19"], 
            ["üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"],
            ["üåê–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"], 
            ["‚úâÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"]
        ], 
        resize_keyboard = True
    )
    await globals.bot.send_message(message.chat.id, 
            text="ü§ñUniversal Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëáüèº", 
            reply_markup = usl)

@logger.catch
async def eng_start(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —É—Å–ª–æ–≤–∏–∏ –≤ own_start()
    '''
    usl = ReplyKeyboardMarkup(
        keyboard = [
            ["‚ö†Ô∏èCOVID-19 statistics"], 
            ["üí∏Currency"], 
            ["üí£Attack number"], 
            ["üåêChange the language"], 
            ["‚úâÔ∏èSend message"]
        ], 
        resize_keyboard = True
    )
    await globals.bot.send_message(message.chat.id, 
                           text="ü§ñUniversal Bot\n\nSelect an actionüëáüèº", 
                           reply_markup = usl)

@logger.catch
async def ru_covid_19(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–æ—Ç.
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ Covid-19 –¥–ª—è —Ä—É—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    '''

    r = requests.get(url="https://xn--80aesfpebagmfblc0a.xn--p1ai/")
    html = r.text
    soup = BeautifulSoup(html, "lxml")
    line1 = soup.find_all("div", class_ = "cv-countdown__item-value")
    date  = dt.strftime(dt.now(), "–î–∞—Ç–∞: *%d-%m-%Y* - –í—Ä–µ–º—è: *%H:%M:%S*")

    await globals.bot.send_message(
                message.chat.id, 
                text=str(date)+" - –°—Ç—Ä–∞–Ω–∞: *–†–æ—Å—Å–∏—è*\n\n"+\
                f"1Ô∏è‚É£ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: *{line1[0].text}*\n"
                f"2Ô∏è‚É£ –°–ª—É—á–∞–µ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: *{line1[1].text}*\n"
                f"3Ô∏è‚É£ –°–ª—É—á–∞–µ–≤ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: *{line1[2].text}*\n"
                f"4Ô∏è‚É£ –ß–µ–ª–æ–≤–µ–∫ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ: *{line1[3].text}*\n"
                f"5Ô∏è‚É£ –ß–µ–ª–æ–≤–µ–∫–∞ —É–º–µ—Ä–ª–æ: *{line1[4].text}*", 
                parse_mode = "Markdown")

@logger.catch
async def eng_covid_19(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–æ—Ç.
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ Covid-19 –¥–ª—è –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    '''

    r = requests.get(url="https://xn--80aesfpebagmfblc0a.xn--p1ai/")
    html = r.text
    soup = BeautifulSoup(html, "lxml")
    line1 = soup.find_all("div", class_ = "cv-countdown__item-value")
    await globals.bot.send_message(
                message.chat.id, 
                text=dt.strftime(dt.now(), 
                        "Date: *%d-%m-%Y* - Time: *%H:%M:%S*")+" - Country: *Russia*\n\n"
                f"1Ô∏è‚É£ Tests performed: *{line1[0].text[:-4]}mln*\n"
                f"2Ô∏è‚É£ Disease cases: *{line1[1].text}*\n"
                f"3Ô∏è‚É£ Disease cases in the last 24 hours: *{line1[2].text}*\n"
                f"4Ô∏è‚É£ Man recovered: *{line1[3].text}*\n"
                f"5Ô∏è‚É£ The person died: *{line1[4].text}*", 
                parse_mode = "Markdown")

@logger.catch
async def ru_currency(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ —Å —Ä–∞–∑–Ω—ã—Ö 
    –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–æ–≤.
    '''
       
    r = requests.get(url="https://www.yandex.ru") #Yandex url
    soup = BeautifulSoup(r.text, "html.parser")   #HTML-page

    #Get Dollar currency
    dollar = soup.find("div", class_ = "b-inline inline-stocks__item "+
    "inline-stocks__item_id_2002 hint__item inline-stocks__part")
    dollar = dollar.find("span", class_ = "inline-stocks__value_inner")

    #Get Euro currency
    euro = soup.find("div",  class_ = "b-inline inline-stocks__item "+
    "inline-stocks__item_id_2000 hint__item inline-stocks__part")
    euro = euro.find('span', class_ = 'inline-stocks__value_inner')

    #Get Oil currency
    oil = soup.find("div", class_ = "b-inline inline-stocks__item "+
    "inline-stocks__item_id_1006 hint__item")
    oil = oil.find("span", class_ = "inline-stocks__value_inner")

    #Get Bitcoin currency
    url_btc = requests.get(timeout=1, url=
    "https://www.banknn.ru/kurs-kriptovalyut/bitcoin")
    btc_soup = BeautifulSoup(url_btc.text, "html.parser")
    btc = btc_soup.find("td", class_ = "digit")

    #Get Ethereum currency
    url_eth = requests.get(timeout=1, url=
    "https://www.banknn.ru/kurs-kriptovalyut/ethereum")
    eth_soup = BeautifulSoup(url_eth.text, "html.parser")
    eth = eth_soup.find("td", class_ = "digit")

    #Get Ripple(xrp) currency
    url_xrp = requests.get(timeout=1, url=
    "https://www.banknn.ru/kurs-kriptovalyut/ripple")
    xrp_soup = BeautifulSoup(url_xrp.text, "html.parser")
    xrp = xrp_soup.find("td", class_ = "digit")

    #Get BNB(Binance) currency
    url_bnb = requests.get(timeout=1, url=
    "https://www.binance.com/en/trade/BNB_BUSD")
    bnb_soup = str(BeautifulSoup(url_bnb.text, "html.parser").find(id="__APP_DATA"))
    bnb = json.loads(bnb_soup.replace("</script>", "").replace('<script id="__APP_DATA" type="application/json">', ""))
    bnb = bnb["pageData"]["redux"]["products"]["currentProduct"]["close"]
    try:
        await globals.bot.send_message(message.chat.id,
        text=f"üíµ–î–æ–ª–ª–∞—Ä: *"+str(dollar.text)+"*\n"
        f"üí∂–ï–≤—Ä–æ: *{euro.text}*\n"
        f"üõ¢–ù–µ—Ñ—Ç—å: *{oil.text}*\n\n"
        f"üíé–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:\n"
        f"BTC: `{btc.text}$`\n"
        f"ETH: `{eth.text}$`\n"
        f"XRP: `{xrp.text}$`\n"
        f"BNB: `{bnb}$`",
        parse_mode = "Markdown")
    except Exception as e:
        logger.error(e)
        await globals.bot.send_message(message.chat.id, 
        text=f"üíµ–î–æ–ª–ª–∞—Ä: *{dollar.text}*\n"
        f"üí∂–ï–≤—Ä–æ: *{euro.text}*\n"
        f"üõ¢–ù–µ—Ñ—Ç—å: *{oil.text}*\n\n"
        f"üíé–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:\n"
        f"BTC: `{btc.text}$`\n"
        f"ETH: `{eth.text}$`\n"
        f"XRP: `{xrp.text}$`", 
        parse_mode = "Markdown")

@logger.catch
async def eng_currency(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ —Å —Ä–∞–∑–Ω—ã—Ö 
    –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ä–µ—Å—É—Ä—Å–æ–≤.
    '''
    
    r = requests.get(timeout=1, url="https://www.yandex.ru") #Yandex url
    soup = BeautifulSoup(r.text, "lxml")                     #HTML-page

    #Get Dollar currency
    dollar = soup.find("div",    class_ = "b-inline inline-stocks__item "+ 
    "inline-stocks__item_id_2002 hint__item inline-stocks__part")
    dollar = dollar.find("span", class_ = "inline-stocks__value_inner")

    #Get Euro currency
    euro = soup.find("div",  class_ = "b-inline inline-stocks__item "+
    "inline-stocks__item_id_2000 hint__item inline-stocks__part")
    euro = euro.find('span', class_ = 'inline-stocks__value_inner')

    #Get Oil currency
    oil = soup.find("div", class_ = "b-inline inline-stocks__item "+
    "inline-stocks__item_id_1006 hint__item")
    oil = oil.find("span", class_ = "inline-stocks__value_inner")

    #Get Bitcoin currency
    url_btc = requests.get(timeout=1, 
    url="https://www.banknn.ru/kurs-kriptovalyut/bitcoin")
    btc_soup = BeautifulSoup(url_btc.text, "lxml")
    btc = btc_soup.find("td", class_ = "digit")

    #Get Ethereum currency
    url_eth = requests.get(timeout=1, 
    url="https://www.banknn.ru/kurs-kriptovalyut/ethereum")
    eth_soup = BeautifulSoup(url_eth.text, "lxml")
    eth = eth_soup.find("td", class_ = "digit")

    #Get Xrp currency
    url_xrp = requests.get(timeout=1, 
    url="https://www.banknn.ru/kurs-kriptovalyut/ripple")
    xrp_soup = BeautifulSoup(url_xrp.text, "lxml")
    xrp = xrp_soup.find("td", class_ = "digit")

    #Get BNB currency
    url_bnb = requests.get(timeout=1, 
    url="https://coinmarketcap.com/ru/currencies/binance-coin")
    bnb_soup = BeautifulSoup(url_bnb.text, "lxml")
    bnb = bnb_soup.find("span", class_ = "cmc-details-panel-price__price")

    try:
        await globals.bot.send_message(message.chat.id, 
        text=f"üíµDollar: *{dollar.text}*\n"
        f"üí∂Euro: *{euro.text}*\n"
        f"üõ¢OIL: *{oil.text}*\n\n"
        f"üíéCryptocurrency:\n"
        f"BTC: `{btc.text}$`\n"
        f"ETH: `{eth.text}$`\n"
        f"XRP: `{xrp.text}$`\n"
        f"BNB: `{bnb.text[1:]}$`", 
        parse_mode = "Markdown")
    except:
        await globals.bot.send_message(message.chat.id, 
        text=f"üíµDollar: *{dollar.text}*\n"
        f"üí∂Euro: *{euro.text}*\n"
        f"üõ¢OIL: *{oil.text}*\n\n"
        f"üíéCryptocurrency:\n"
        f"BTC: `{btc.text}$`\n"
        f"ETH: `{eth.text}$`\n"
        f"XRP: `{xrp.text}$`", 
        parse_mode = "Markdown")

@logger.catch
async def get_currency_usd(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ–º–∞—Ä—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ(–î–æ–ª–ª–∞—Ä)

    '''
    try:
        await globals.bot.delete_message(message.chat.id, message.message_id)
    except:await globals.bot.delete_message(message.from_user.id, message.message_id)

    try:
        usd_url = requests.get(timeout=0.5, url=
        "https://www.binance.com/en/trade/USDT_RUB")
        usd_soup = str(BeautifulSoup(usd_url.text, "html.parser").find(id="__APP_DATA"))
        usd = json.loads(usd_soup.replace("</script>", "").replace('<script id="__APP_DATA" type="application/json">', ""))
        usd = usd["pageData"]["redux"]["products"]["currentProduct"]

        symbol = usd["symbol"]
        close_price = usd["close"]
        low_price = usd["low"]
        high_price = usd["high"]

        await globals.bot.send_message(
            message.chat.id, 
            text=f"*{symbol}*\n"
            f"_Now_: `{close_price}`\n"
            f"_Min_: *{low_price}*\n"
            f"_Max_: *{high_price}*", 
            parse_mode="Markdown"
        )
    except Exception as e:
        await globals.bot.send_message(
            message.chat.id, 
            text=f"‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞...\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ ‚ûî {e}"
        )

@logger.catch
async def get_currency_btc(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ–º–∞—Ä—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ(–ë–∏—Ç–∫–æ–∏–Ω)
    '''

    try:
        await globals.bot.delete_message(message.chat.id, message.message_id)
    except:await globals.bot.delete_message(message.from_user.id, message.message_id)

    try:
        btc_url = requests.get(timeout=0.5, url=
        "https://www.binance.com/en/trade/BTC_USDT")
        btc_soup = str(BeautifulSoup(btc_url.text, "html.parser").find(id="__APP_DATA"))
        btc = json.loads(btc_soup.replace("</script>", "").replace('<script id="__APP_DATA" type="application/json">', ""))
        btc = btc["pageData"]["redux"]["products"]["currentProduct"]

        symbol = btc["symbol"]
        close_price = btc["close"]
        low_price = btc["low"]
        high_price = btc["high"]

        await globals.bot.send_message(
            message.chat.id, 
            text=f"*{symbol}*\n"
            f"_Now_: `{close_price}`\n"
            f"_Min_: *{low_price}*\n"
            f"_Max_: *{high_price}*", 
            parse_mode="Markdown"
        )
    except Exception as e:
        await globals.bot.send_message(
            message.chat.id, 
            text=f"‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞...\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ ‚ûî {e}"
        )

@logger.catch
async def get_currency_eth(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ–º–∞—Ä—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ(–≠—Ñ–∏—Ä)
    '''

    try:
        await globals.bot.delete_message(message.chat.id, message.message_id)
    except:await globals.bot.delete_message(message.from_user.id, message.message_id)

    try:
        eth_url = requests.get(timeout=0.5, url=
        "https://www.binance.com/en/trade/ETH_USDT")
        eth_soup = str(BeautifulSoup(eth_url.text, "html.parser").find(id="__APP_DATA"))
        eth = json.loads(eth_soup.replace("</script>", "").replace('<script id="__APP_DATA" type="application/json">', ""))
        eth = eth["pageData"]["redux"]["products"]["currentProduct"]

        symbol = eth["symbol"]
        close_price = eth["close"]
        low_price = eth["low"]
        high_price = eth["high"]

        await globals.bot.send_message(
            message.chat.id, 
            text=f"*{symbol}*\n"
            f"_Now_: `{close_price}`\n"
            f"_Min_: *{low_price}*\n"
            f"_Max_: *{high_price}*", 
            parse_mode="Markdown"
        )
    except Exception as e:
        await globals.bot.send_message(
            message.chat.id, 
            text=f"‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞...\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ ‚ûî {e}"
        )

@logger.catch
async def get_currency_bnb(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–Ω—Ñ–æ–º–∞—Ä—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ(–î–æ–ª–ª–∞—Ä)
    '''

    try:
        await globals.bot.delete_message(message.chat.id, message.message_id)
    except:await globals.bot.delete_message(message.from_user.id, message.message_id)
    
    try:
        bnb_url = requests.get(timeout=0.5, url=
        "https://www.binance.com/en/trade/BNB_USDT")
        bnb_soup = str(BeautifulSoup(bnb_url.text, "html.parser").find(id="__APP_DATA"))
        bnb = json.loads(bnb_soup.replace("</script>", "").replace('<script id="__APP_DATA" type="application/json">', ""))
        bnb = bnb["pageData"]["redux"]["products"]["currentProduct"]

        symbol = bnb["symbol"]
        close_price = bnb["close"]
        low_price = bnb["low"]
        high_price = bnb["high"]

        await globals.bot.send_message(
            message.chat.id, 
            text=f"*{symbol}*\n"
            f"_Now_: `{close_price}`\n"
            f"_Min_: *{low_price}*\n"
            f"_Max_: *{high_price}*", 
            parse_mode="Markdown"
        )
    except Exception as e:
        await globals.bot.send_message(
            message.chat.id, 
            text=f"‚ö†Ô∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞...\n"
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ ‚ûî {e}"
        )

@logger.catch
async def adm(message: types.Message):
    '''
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    1. –†–∞—Å—Å—ã–ª–∫–∞
    2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''

    if str(message.from_user.id) == str(globals.config.chat_id):
        usl = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text = "üì£–†–∞—Å—Å—ã–ª–∫–∞", 
                                    callback_data = "–†–∞—Å—Å—ã–ª–∫–∞")],
                [InlineKeyboardButton(text = "üìß–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ(ID)", 
                                    callback_data= "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ(ID)")]
            ]
        )

        await globals.bot.send_message(message.chat.id, 
                               text="ü§ñUniversal Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µüëáüèº", 
                               reply_markup = usl)
        await Userstate.try_try.set()
    else:pass

@logger.catch
async def ru_send_message(message: types.Message):
    '''
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É.
    –†—É—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    await globals.bot.send_message(message.chat.id, 
    f"üîë–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–±–æ—Ç–∏–º—Å—è –æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
    f"–ø–æ—ç—Ç–æ–º—É –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞!\n\n "
    f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await Userstate.send_message.set()

@logger.catch
async def eng_send_message(message: types.Message):
    '''
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É.
    –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    await globals.bot.send_message(message.chat.id,
    f"üîëWe completely care about user privacy, "
    f"so we integrated the function of sending a message through a bot!\n\n "
    f"Write a message:")
    await Userstate.send_message.set()

@logger.catch
async def change_language(message:types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
    –î–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä: 
        1. –ê–Ω–≥–ª–∏–π—Å–∫–∏–π(ENG)
        2. –†—É—Å—Å–∫–∏–π(RUS)
    '''

    change_language_usl = InlineKeyboardMarkup(
        inline_keyboard = [
            [InlineKeyboardButton(text="üá¨üáßENG", callback_data="ENG")],
            [InlineKeyboardButton(text="üá∑üá∫RU", callback_data="RU")]
        ]
    )

    await globals.bot.send_message(message.chat.id, 
                           text = f"üåêSelect the language\n"
                                  f"üåê–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", 
    reply_markup=change_language_usl)

@logger.catch
async def ru_attack_phone(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤

    –†—É—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''

    user_id = message.from_user.id

    my_data = select([data_users_table]).where(data_users_table.c.user_id==user_id)
    my_data = globals.conn.execute(my_data).fetchone()

    if my_data == None:

        date = dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S")

        update_data = data_users_table.insert().values(
            user_id=user_id, 
            date=date, 
            status=30, 
            last_phone="None", 
            last_date="None"
        )
        globals.conn.execute(update_data)

        await globals.bot.send_message(
            user_id, 
            text=f"‚úÖ–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 30 –∫—Ä—É–≥–æ–≤."
            f"–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É üí£–ê—Ç–∞–∫–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"
        )

    else:

        download_program = InlineKeyboardMarkup(
            inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨áÔ∏è–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", 
                                    callback_data="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É")], 
                    [InlineKeyboardButton(text="‚ùî–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
                                    callback_data="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ")]
            ]
        )

        try:
            date  = dt.strptime(my_data[4], "%d-%m-%Y %H:%M:%S")
            date  = dt.strftime(date, "*–î–∞—Ç–∞: %d-%m-%Y* *–í—Ä–µ–º—è: %H:%M:%S*")                      
        except:date = "–ö—Ä—É–≥–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã!"
        
        if my_data[2] == "‚àû":

            if my_data[3] == "None" and my_data[4] == "None":

                await globals.bot.send_message(user_id, 
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏ ‚ûú\n\n"
                f"üìå–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∞—Ç–∞–∫—É!\n\n"
                f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã (79#########):", 
                reply_markup=download_program)
                await Userstate.attack_phone.set()

            else:

                await globals.bot.send_message(user_id, 
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏ ‚ûú\n\n"
                f"üìÖüï∞{date}\n"
                f"üìå–ù–æ–º–µ—Ä: `{my_data[3]}`\n"
                f"‚è±–û—Å—Ç–∞–ª–æ—Å—å –∫—Ä—É–≥–æ–≤: *{my_data[2]}*\n\n"
                f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã (79#########):", 
                reply_markup=download_program, parse_mode = "Markdown")
                await Userstate.attack_phone.set()

        else:

            if int(my_data[2]) == 0:

                await globals.bot.send_message(user_id, 
                f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏ ‚ûú\n\nüìÖüï∞{date}\n"
                f"üìå–ù–æ–º–µ—Ä: `{my_data[3]}`\n"
                f"‚åõ–°—Ç–∞—Ç—É—Å: *–ö—Ä—É–≥–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!*", 
                reply_markup=download_program, parse_mode = "Markdown") 
                await Userstate.try_try.set()   

            else:

                if my_data[3] == "None" and my_data[4] == "None":
                    await globals.bot.send_message(user_id, 
                    f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏ ‚ûú\n\n"
                    f"üìå–í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –∞—Ç–∞–∫—É!\n\n"
                    f"‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã (79#########):", 
                    reply_markup=download_program)
                    await Userstate.attack_phone.set()
                
                else:

                    date = dt.strptime(my_data[4], "%d-%m-%Y %H:%M:%S")
                    date = dt.strftime(date, "*%d-%m-%Y* *%H:%M:%S*")

                    await globals.bot.send_message(user_id, 
                    f"üìÑ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞—Ç–∞–∫–∏ ‚ûú\n\n"
                    f"üìÖüï∞{date}\nüìå–ù–æ–º–µ—Ä: `{my_data[3]}`\n"
                    f"‚è±–û—Å—Ç–∞–ª–æ—Å—å –∫—Ä—É–≥–æ–≤: *{my_data[2]}*\n\n"
                    "‚òéÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∂–µ—Ä—Ç–≤—ã (79#########):", 
                    reply_markup=download_program, parse_mode = "Markdown")
                    await Userstate.attack_phone.set()

@logger.catch
async def eng_attack_phone(message: types.Message):
    '''
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–≤–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê—Ç–∞–∫–æ–≤–∞—Ç—å"

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        1. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤

    –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
    '''
    #State user_id
    user_id = message.from_user.id

    my_data = select([data_users_table]).where(data_users_table.c.user_id==user_id)
    my_data = globals.conn.execute(my_data).fetchone()

    if my_data == None:

        date = dt.strftime(dt.now(), "%d-%m-%Y %H:%M:%S")

        update_data = data_users_table.insert().values(
            user_id=user_id, 
            date=date, 
            status=30, 
            last_phone="None", 
            last_date="None"
        )
        globals.conn.execute(update_data)

        await globals.bot.send_message(
            user_id, 
            text=f"‚úÖYou are registered! You have 30 laps available."
            f"Click again on the button üí£Attack number"
        )

    else:
        download_program = InlineKeyboardMarkup(
            inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨áÔ∏èDownload the program", 
                                    callback_data="Download the program")], 
                    [InlineKeyboardButton(text="‚ùîInfo about the program", 
                                    callback_data="Info about the program")]
            ]
        )

        try:
            date = dt.strptime(my_data[4], "%d-%m-%Y %H:%M:%S")
            date = dt.strftime(date, "*Date: %d-%m-%Y* *Time: %H:%M:%S*")

        except: date = "Time unknown!"

        if str(my_data[2]) == "‚àû":

            if my_data[3] == "None" and my_data[4] == "None":

                await globals.bot.send_message(user_id, 
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üìåYou haven't made an attack yet!\n\n"
                f"‚òéÔ∏èEnter the victim's phone number (79#########):", 
                reply_markup=download_program)
                await Userstate.attack_phone.set()

            else:

                date = dt.strptime(my_data[4], "%d-%m-%Y %H:%M:%S")
                date = dt.strftime(date, "Date: *%d-%m-%Y* Time: *%H:%M:%S*")
                
                await globals.bot.send_message(user_id, 
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üìÖüï∞{date}\nüìåPhone number: `{my_data[3]}`\n"
                f"‚è±Circles left: *{my_data[2]}*\n\n"
                "Enter the victim's phone number (79#########):", 
                reply_markup=download_program, parse_mode = "Markdown")
                await Userstate.attack_phone.set()
        else:

            if int(my_data[2]) == 0:
                await globals.bot.send_message(user_id, 
                f"üìÑInformation about the last attack ‚ûú\n\n"
                f"üìÖüï∞{date}\nüìåPhone number: `{my_data[3]}`\n"
                "‚åõStatus: *The circles are gone!*", 
                reply_markup=download_program, parse_mode = "Markdown") 
                await Userstate.try_try.set()  

            else:

                if my_data[3] == "None" and my_data[4] == "None":
                    await globals.bot.send_message(user_id, 
                    f"üìÑInformation about the last attack ‚ûú\n\n"
                    f"üìåYou haven't made an attack yet!\n\n"
                    f"‚òéÔ∏èEnter the victim's phone number (79#########):", 
                    reply_markup=download_program)
                    await Userstate.attack_phone.set()
                
                else:
                    await globals.bot.send_message(user_id, 
                    f"üìÑInformation about the last attack ‚ûú\n\n"
                    f"üìÖüï∞{date}\nüìåPhone number: `{my_data[3]}`\n"
                    f"‚è±Circles left: *{my_data[2]}*\n\n"
                    "‚òéÔ∏èEnter the victim's phone number (79#########):", 
                    reply_markup=download_program, parse_mode = "Markdown")
                    await Userstate.attack_phone.set()

@logger.catch
async def subscribe_concurs(message: types.Message):
    '''
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    '''

    _my_data = open("referals_data.json", "r")
    my_data = json.loads(_my_data.read())
    if str(message.from_user.id) in my_data:
        usl = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùì–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞", 
                                      callback_data="‚ùì–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞")]
            ]
        )
        await globals.bot.send_message(message.chat.id, 
        f"üïí–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.\n\n"
        f"üë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\
        {len(my_data[str(message.from_user.id)])}\n"
        f"üìÉ–£—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,\
         –æ–ø–µ—Ä–µ–¥–∏—Ç—å —Å–≤–æ–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!\n"+
        f"üí∞–ü—Ä–∏–∑: 500‚ÇΩ\n\n"+
        f"üîó–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\
        https://t.me/{globals.bot_info.username}/?start={str(message.from_user.id)}", 
        reply_markup=usl)
        _my_data.close()
    else: 
        my_data[str(message.from_user.id)] = []
        with open("referals_data.json", "w") as f:
            f.write(json.dumps(my_data))
            f.close()
        await globals.bot.send_message(message.chat.id, 
        f"üí•–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!\n\n"+
        f"üë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\
        {len(my_data[str(message.from_user.id)])}\n"+
        f"üìÉ–£—Å–ª–æ–≤–∏—è –∫–æ–Ω–∫—É—Ä—Å–∞: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,\
         –æ–ø–µ—Ä–µ–¥–∏—Ç—å —Å–≤–æ–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!\n"+
        f"üí∞–ü—Ä–∏–∑: 500‚ÇΩ\n\n"+
        f"üîó–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\
         https://t.me/{globals.bot_info.username}/?start={str(message.from_user.id)}")
        _my_data.close()

@logger.catch
async def help(message: types.Message) -> str:
    language = select([all_users_table]).where(all_users_table.c.user_id==message.from_user.id)
    language = globals.conn.execute(language).fetchone()

    if language[3] == "ENG":
        
        with open(r"_data/help_eng.txt", "r", encoding="utf-8") as help_text_read:
            help_text = help_text_read.read()

    elif language[3] == "RU":

        with open(r"_data/help_ru.txt", "r", encoding="utf-8") as help_text_read:
            help_text = help_text_read.read()
    
    return await message.reply(help_text, parse_mode="Markdown")